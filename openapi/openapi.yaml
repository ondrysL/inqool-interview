openapi: 3.0.0
info:
  title: InQool Interview API
  version: 1.0.0
  description: Simple REST API with users and animals
servers:
  - url: https://inqool-interview-api.vercel.app/api
paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUser'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted

  /animals:
    get:
      summary: Get all animals
      responses:
        '200':
          description: A list of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
    post:
      summary: Create a new animal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAnimal'
      responses:
        '200':
          description: The created animal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'

  /animals/{id}:
    get:
      summary: Get animal by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single animal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
    patch:
      summary: Update animal by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialAnimal'
      responses:
        '200':
          description: The updated animal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
    delete:
      summary: Delete animal by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Animal deleted

  /seed:
    post:
      summary: Seed the database with initial data
      responses:
        '204':
          description: Database seeded

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        gender:
          type: string
          enum: [male, female, other]
        banned:
          type: boolean
      required: [id, name, gender, banned]

    NewUser:
      type: object
      properties:
        name:
          type: string
        gender:
          type: string
          enum: [male, female, other]
        banned:
          type: boolean
      required: [name, gender, banned]

    PartialUser:
      type: object
      properties:
        name:
          type: string
        gender:
          type: string
          enum: [male, female, other]
        banned:
          type: boolean

    Animal:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [cat, dog, other]
        age:
          type: integer
      required: [id, name, type, age]

    NewAnimal:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [cat, dog, other]
        age:
          type: integer
      required: [name, type, age]

    PartialAnimal:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [cat, dog, other]
        age:
          type: integer
